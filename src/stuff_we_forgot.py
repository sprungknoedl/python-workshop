#! /usr/bin/python2.6
# -*- coding: utf-8 -*-


import sys

# #################
# Integer vs. Long
# #################

x = sys.maxint
print type(x)
x += 1
print x
print type(x)
# longs are actually mutli precision integer

# Therefore things like rsa are really easy:
# the prime factors p and q
p = 105006596750439838921657820545943839245465808980258309214306206529991672754418836502858325254851920837204920066584698782976105793491470851784345582604443070083606226851323050826433529699371823329211479836838048381157642543010323675167542290632234199557783131869660148548462065363082827593115315425002959754591L
q = 126119451179839800192378866499926077903804345896890220038618881879391394143932617269082811707645304616021648285311691300382734827509764048812872664004441636857985007244241506382622894520141955917409028708492359629522207436596322120329428071783135305717186507684647382626710194624204594841012039658854937827069L
# the modulus
n = p * q
# the public exponent
e = 65537L
# the private exponent
d = 12262503407668977643880073393500322141375542393136913682299808090379944145817265005525622403243308347000568105446338214841819760975138749321919992335502395631221046387604527393572036796161103181233375463109781240751943091943925290609720844656765770052466264205898817842424048151333959716942813165422633763791834268155998556270180245028682335129194032097175483967473201573046927998088629992854075330091195101241690947156567845878893347333207734161858215200455868554505556288214621099553157926838624404830217844812986645328696948481548121457624557608114663034835987129219510994238624969626841066460676229370271841198553L
# the plaintext
m = 421337421337421337421337421337421337421337421337421337421337L
# encrypting with rsa
c = pow(m, e, n)
#print m, "\n"
#print c, "\n"
# decrypting rsa
print m == pow(c, d, n)
# key generation is still a little bit more difficult ;)




# ##############
# Sequence Types
# ##############
# http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange


x = [1,2,3,4]
print x
if 1 in x and 5 not in x:
    y = x * 3
    print y
    y.sort() # sort happens "in-place"
    print y
    print max(y)
    print min(y)
    print y[2:-1:3] # slice from 2 to -1 with step 3
    print y[::3] # every third element
    
for i in range(100):
    sys.stdout.write(str(i) + ",")
print
    
    
